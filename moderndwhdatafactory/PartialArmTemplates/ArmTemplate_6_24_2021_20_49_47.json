{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "moderndwhdatafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflowcompartment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "IntermediateCSV",
								"type": "DatasetReference"
							},
							"name": "CSVSource"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGroup",
								"type": "DatasetReference"
							},
							"name": "dwhdb"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGroup",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "createHash"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "SetAttrributes"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "CreateHashNewData"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tStore_Code as integer,\n\t\tStore_Name as string,\n\t\tCOMPANY as string,\n\t\tCompartment as string,\n\t\tSubCompartment as string,\n\t\tTYPE as string,\n\t\tnick_name as string,\n\t\tprod_code as string,\n\t\tNetSold_Qty as short,\n\t\tCost as string,\n\t\tRetail_Price as string,\n\t\tUnit_Price_Sold as string,\n\t\tFinalPrice as boolean,\n\t\tCONCESSION_ID as integer,\n\t\tCONCESSION_Code as string,\n\t\tNew_Price_After_Discount as string,\n\t\tCONCESSION_Description as string,\n\t\tAmount_Discount as string,\n\t\tPercent_Discount as double,\n\t\tNetSold_Amount as string,\n\t\tTAX_RATE as double,\n\t\tTAX_AMOUNT1 as double,\n\t\tTAX_AMOUNT2 as double,\n\t\temp_code as string,\n\t\tEmp_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CSVSource\nsource(output(\n\t\tGRP_ID as integer,\n\t\tGRP_NAME as string,\n\t\tSECTION as string,\n\t\t{_inserted_dt} as timestamp,\n\t\t{_updated_dt} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> dwhdb\ndwhdb derive(dimhash = sha1(GRP_NAME+ SECTION)) ~> createHash\nCreateHashNewData, createHash exists(newdatahash == dimhash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1, dwhdb lookup(toString(Compartment) == GRP_NAME,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 derive(GRP_NAME = Compartment,\n\t\tSECTION = SubCompartment,\n\t\t{_inserted_dt} = iif(isNull(GRP_ID) ,  currentTimestamp(), {_inserted_dt}),\n\t\t{_updated_dt} = currentTimestamp()) ~> SetAttrributes\nSetAttrributes aggregate(groupBy(SECTION,\n\t\tGRP_NAME,\n\t\tGRP_ID,\n\t\t{_inserted_dt},\n\t\t{_updated_dt}),\n\tcount = count(SECTION)) ~> Aggregate1\nCSVSource derive(newdatahash = sha1(Compartment + SubCompartment)) ~> CreateHashNewData\nAggregate1 alterRow(insertIf(isNull(GRP_ID)),\n\tupdateIf(not(isNull(GRP_ID)))) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tGRP_ID as integer,\n\t\tGRP_NAME as string,\n\t\tSECTION as string,\n\t\t{_inserted_dt} as timestamp,\n\t\t{_updated_dt} as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['GRP_NAME'],\n\tformat: 'table',\n\tstagingSchemaName: 'sales',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSECTION,\n\t\tGRP_NAME,\n\t\t{_inserted_dt},\n\t\t{_updated_dt}\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowrestconnect')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "rest_Json",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "IntermediateCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tresult as (Amount_Discount as string, CAIS as short, COMPANY as string, CONCESSION_Code as string, CONCESSION_Description as string, CONCESSION_ID as integer, Compartment as string, Cost as string, Inseam as string, LINE_ID as short, Line_Applied as double, NetSold_Amount as string, NetSold_Qty as short, New_Price_After_Discount as string, Percent_Discount as double, PriceOverride as boolean, RCPT_NOTE1 as string, RCPT_NOTE2 as string, Retail_Price as string, SALE_TYPE as string, Shop_Code as string, Shop_Name as string, SubCompartment as string, Surver_Age as string, Surver_Gender as string, TAX_AMOUNT1 as double, TAX_AMOUNT2 as double, TAX_RATE as double, TRANSDATE as long, TRANSNUM as short, TRANSTIME as integer, TRANSTIMESTR as integer, TS_ID as timestamp, TYPE as string, Unit_Price_Sold as string, VOID_FLAG as boolean, Waist as string, emp_Name as string, emp_code as string, nick_name as string, prod_code as string, vipcode as double)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> source1\nsource1 foldDown(unroll(result),\n\tmapColumn(\n\t\tresult\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 derive(Shop_Code = result.Shop_Code,\n\t\tShop_Name = result.Shop_Name,\n\t\tCOMPANY = result.COMPANY,\n\t\tCompartment = result.Compartment,\n\t\tSubCompartment = result.SubCompartment,\n\t\tTYPE = result.TYPE,\n\t\tnick_name = result.nick_name,\n\t\tprod_code = result.prod_code,\n\t\tNetSold_Qty = result.NetSold_Qty,\n\t\tCost = result.Cost,\n\t\tRetail_Price = result.Retail_Price,\n\t\tUnit_Price_Sold = result.Unit_Price_Sold,\n\t\tPriceOverride = result.PriceOverride,\n\t\tCONCESSION_ID = result.CONCESSION_ID,\n\t\tCONCESSION_Code = result.CONCESSION_Code,\n\t\tNew_Price_After_Discount = result.New_Price_After_Discount,\n\t\tCONCESSION_Description = result.CONCESSION_Description,\n\t\tAmount_Discount = result.Amount_Discount,\n\t\tPercent_Discount = result.Percent_Discount,\n\t\tNetSold_Amount = result.NetSold_Amount,\n\t\tTAX_RATE = result.TAX_RATE,\n\t\tTAX_AMOUNT1 = result.TAX_AMOUNT1,\n\t\tTAX_AMOUNT2 = result.TAX_AMOUNT2,\n\t\temp_code = result.emp_Name,\n\t\tEmp_Name = result.emp_Name,\n\t\tTRANSDATE = result.TRANSDATE,\n\t\tTRANSTIME = result.TRANSTIME,\n\t\tTRANSNUM = result.TRANSNUM) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tjson_value as string\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tStore_Code = Shop_Code,\n\t\tStore_Name = Shop_Name,\n\t\tCOMPANY,\n\t\tCompartment,\n\t\tSubCompartment,\n\t\tTYPE,\n\t\tnick_name,\n\t\tprod_code,\n\t\tNetSold_Qty,\n\t\tCost,\n\t\tRetail_Price,\n\t\tUnit_Price_Sold,\n\t\tFinalPrice = PriceOverride,\n\t\tCONCESSION_ID,\n\t\tCONCESSION_Code,\n\t\tNew_Price_After_Discount,\n\t\tCONCESSION_Description,\n\t\tAmount_Discount,\n\t\tPercent_Discount,\n\t\tNetSold_Amount,\n\t\tTAX_RATE,\n\t\tTAX_AMOUNT1,\n\t\tTAX_AMOUNT2,\n\t\temp_code,\n\t\tEmp_Name,\n\t\tTRANSDATE,\n\t\tTRANSTIME,\n\t\tTRANSNUM\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowsales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "IntermediateCSV",
								"type": "DatasetReference"
							},
							"name": "CSVSource"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlShop",
								"type": "DatasetReference"
							},
							"name": "ShopDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlEmployee",
								"type": "DatasetReference"
							},
							"name": "EmployeeDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlProduct",
								"type": "DatasetReference"
							},
							"name": "ProductDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGroup",
								"type": "DatasetReference"
							},
							"name": "GroupDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlConcesssion",
								"type": "DatasetReference"
							},
							"name": "ConcessionDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SalesBlob",
								"type": "DatasetReference"
							},
							"name": "sinksalesblob"
						}
					],
					"transformations": [
						{
							"name": "LookupShop"
						},
						{
							"name": "SetAttrributes"
						},
						{
							"name": "LookupEmployee"
						},
						{
							"name": "LookupProduct"
						},
						{
							"name": "LookupGroup"
						},
						{
							"name": "LookupConcession"
						}
					],
					"script": "source(output(\n\t\tStore_Code as integer,\n\t\tStore_Name as string,\n\t\tCOMPANY as string,\n\t\tCompartment as string,\n\t\tSubCompartment as string,\n\t\tTYPE as string,\n\t\tnick_name as string,\n\t\tprod_code as string,\n\t\tNetSold_Qty as short,\n\t\tCost as string,\n\t\tRetail_Price as string,\n\t\tUnit_Price_Sold as string,\n\t\tFinalPrice as boolean,\n\t\tCONCESSION_ID as integer,\n\t\tCONCESSION_Code as string,\n\t\tNew_Price_After_Discount as string,\n\t\tCONCESSION_Description as string,\n\t\tAmount_Discount as string,\n\t\tPercent_Discount as double,\n\t\tNetSold_Amount as string,\n\t\tTAX_RATE as double,\n\t\tTAX_AMOUNT1 as double,\n\t\tTAX_AMOUNT2 as double,\n\t\temp_code as string,\n\t\tEmp_Name as string,\n\t\tTRANSDATE as long,\n\t\tTRANSTIME as integer,\n\t\tTRANSNUM as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CSVSource\nsource(output(\n\t\tPOS_ID as integer,\n\t\tPOS_CODE as string,\n\t\tPOS_LABEL as string,\n\t\tDISTRICT as string,\n\t\tBLOCK as string,\n\t\tREGION as string,\n\t\tTIER as string,\n\t\t{_inserted_dt} as timestamp,\n\t\t{_updated_dt} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ShopDim\nsource(output(\n\t\tEMP_ID as integer,\n\t\tEMP_CODE as string,\n\t\tEMP_NAME as string,\n\t\t{_inserted_dt} as timestamp,\n\t\t{_updated_dt} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EmployeeDim\nsource(output(\n\t\tPROD_ID as integer,\n\t\tPROD_TYPE as string,\n\t\tPROD_NAME as string,\n\t\tPROD_CODE as string,\n\t\tLABEL_NAME as string,\n\t\t{_inserted_dt} as timestamp,\n\t\t{_updated_dt} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProductDim\nsource(output(\n\t\tGRP_ID as integer,\n\t\tGRP_NAME as string,\n\t\tSECTION as string,\n\t\t{_inserted_dt} as timestamp,\n\t\t{_updated_dt} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> GroupDim\nsource(output(\n\t\tCONS_ID as integer,\n\t\tCONS_CODE as string,\n\t\tCONS_DESCRIPTION as string,\n\t\t{_inserted_dt} as timestamp,\n\t\t{_updated_dt} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ConcessionDim\nCSVSource, ShopDim lookup(toString(Store_Code) == POS_CODE,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupShop\nLookupConcession derive(POS_ID = POS_ID,\n\t\tEMP_ID = EMP_ID,\n\t\t{_inserted_dt} = currentTimestamp(),\n\t\tCONCESSION_ID = CONCESSION_ID,\n\t\tGRP_ID = GRP_ID,\n\t\tPROD_ID = PROD_ID,\n\t\tNetSold_Qty = NetSold_Qty,\n\t\tCost = Cost,\n\t\tUnit_Price_Sold = Unit_Price_Sold,\n\t\tFinalPrice = FinalPrice,\n\t\tRetail_Price = Retail_Price,\n\t\tNetSold_Amount = NetSold_Amount,\n\t\tTRANSDATETIME = toTimestamp(TRANSDATE),\n\t\tTRANSTIME = TRANSTIME,\n\t\tTRANSNUM = TRANSNUM,\n\t\tTAX_AMOUNT1 = TAX_AMOUNT1,\n\t\tTAX_AMOUNT2 = TAX_AMOUNT2,\n\t\tTAX_RATE = TAX_RATE) ~> SetAttrributes\nLookupShop, EmployeeDim lookup(CSVSource@emp_code == EmployeeDim@EMP_CODE,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupEmployee\nLookupEmployee, ProductDim lookup(CSVSource@prod_code == ProductDim@PROD_CODE,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupProduct\nLookupProduct, GroupDim lookup(Compartment == GRP_NAME,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupGroup\nLookupGroup, ConcessionDim lookup(CONCESSION_Code == CONS_CODE,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupConcession\nSetAttrributes sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(concat('sales-',concat(concat(concat(concat (toString(dayOfMonth(  currentUTC('GMT'))) , '-' ),  toString(month(currentUTC('GMT')))), '-'), toString( year(currentUTC('GMT'))))), '.csv'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tEMP_ID,\n\t\t{_inserted_dt},\n\t\tCONCESSION_ID,\n\t\tGRP_ID,\n\t\tPROD_ID,\n\t\tNetSold_Qty,\n\t\tCost,\n\t\tUnit_Price_Sold,\n\t\tFinalPrice,\n\t\tRetail_Price,\n\t\tNetSold_Amount,\n\t\tTRANSDATETIME,\n\t\tTRANSTIME,\n\t\tTRANSNUM,\n\t\tTAX_AMOUNT1,\n\t\tTAX_AMOUNT2,\n\t\tTAX_RATE,\n\t\tPOS_ID\n\t),\n\tpartitionBy('hash', 1)) ~> sinksalesblob"
				}
			},
			"dependsOn": []
		}
	]
}